@page "/artists"
@rendermode InteractiveAuto
@inject HttpClient Http
@* @inject IBffService BffService *@

<PageTitle>Artist</PageTitle>
<h3>Artists</h3>

@if (_artists == null)
{
    <p><em>Loading...</em></p>
}
else if (!_artists.Any())
{
    <p>No artists found.</p>
}
else
{
    <div class="page-size-chooser">
        Items per page:
        <select @bind="@_pagination.ItemsPerPage">
            <option>5</option>
            <option>10</option>
            <option>20</option>
            <option>50</option>
        </select>
    </div>
    <div class="grid">
        <QuickGrid Items="@_artists" Pagination="@_pagination">
            <PropertyColumn Property="@(c => c.Name)" Sortable="true" Class="country-name" />
            <PropertyColumn Property="@(c => c.ActiveFrom)" Sortable="true" Align="Align.Right" />
        </QuickGrid>
    </div>
    <Paginator State="@_pagination" />
}

@code {
    private IQueryable<ArtistDto>? _artists;
    private PaginationState _pagination = new PaginationState { ItemsPerPage = 10 };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // var response = await Http.GetAsync("api/bff/getartists");
            // response.EnsureSuccessStatusCode();
            // List<ArtistDto>? artists = await response.Content.ReadFromJsonAsync<List<ArtistDto>>();
            var bffService = new BffService(Http);
            var artists = new List<ArtistDto>(await bffService.GetArtistsAsync());

            if (artists != null)
            {
                _artists = artists.AsQueryable();
            }
            else
            {
                _artists = Enumerable.Empty<ArtistDto>().AsQueryable();
            }

            StateHasChanged();
        }
    }
}